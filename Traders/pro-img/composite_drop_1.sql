--------------------------------------------------------------
-- Database table removal script

-- Auto-Generated by QSEE-SuperLite (c) 2001-2004 QSEE-Technologies Ltd.

-- note: spaces within table names have been replaced by underscores (_)

-- Target DB: SQL2

-- Entity Model :Entity Relationship Diagram

-- Use this script to drop the tables created by -
--   'C:\Users\user\OneDrive\Desktop\Project Management\ERDANDLOGICALDESIGn\EERD\final.sql'

-- Dropping a table has the effect of removing it from the Database.  All existing data is lost
-- as well as the definition of the table itself (stored as meta-data).  Dropping the tables allows
-- them to be re-created within the Database, even if they already exist.


--------------------------------------------------------------

-- Drop tables --

DROP TABLE PRODUCT_OFFER CASCADE CONSTRAINTS;

DROP TABLE OFFER CASCADE CONSTRAINTS;

DROP TABLE S_USER CASCADE CONSTRAINTS;

DROP TABLE ORDER_Item CASCADE CONSTRAINTS;

DROP TABLE SHOP CASCADE CONSTRAINTS;

DROP TABLE PRODUCT CASCADE CONSTRAINTS;

DROP TABLE REVIEW CASCADE CONSTRAINTS;

DROP TABLE CART CASCADE CONSTRAINTS;

DROP TABLE REPORT CASCADE CONSTRAINTS;

DROP TABLE WISHLIST_PRODUCT CASCADE CONSTRAINTS;

DROP TABLE WISHLIST CASCADE CONSTRAINTS;

DROP TABLE REPORT_PRODUCT CASCADE CONSTRAINTS;

DROP TABLE CART_PRODUCT CASCADE CONSTRAINTS;

DROP TABLE COLLECTION_SLOT CASCADE CONSTRAINTS;

DROP TABLE PAYMENT CASCADE CONSTRAINTS;

DROP TABLE PRODUCT_CATEGORY CASCADE CONSTRAINTS;


--------------------------------------------------------------
-- End of DDL DROP file auto-generation
--------------------------------------------------------------

--------------------------------------------------------------
-- Database creation Script

-- Auto-Generated by QSEE-SuperLite (c) 2001-2004 QSEE-Technologies Ltd.

-- Verbose generation: ON

-- note: spaces within table/column names have been replaced by underscores (_)

-- Target DB: SQL2

-- Entity Model :Entity Relationship Diagram

-- To drop the tables generated by this script run -
--   'C:\Users\user\OneDrive\Desktop\Project Management\ERDANDLOGICALDESIGn\EERD\final_drop.sql'

--------------------------------------------------------------



--------------------------------------------------------------
-- Table Creation --

-- Each entity on the model is represented by a table that needs to be created within the Database.
-- Within SQL new tables are created using the CREATE TABLE command.
-- When a table is created its name and its attributes are defined.
-- The values of which are derived from those specified on the model.
-- Certain constraints are sometimes also specified, such as identification of primary keys.

-- Create a Database table to represent the "OFFER" entity.
CREATE TABLE OFFER(
	Offer_Id	VARCHAR(8) NOT NULL,
	Offer_Start_date	DATE NOT NULL,
	Offer_End_Date	DATE NOT NULL,
	Offer_Percentage	VARCHAR(8) NOT NULL,
	-- Specify the PRIMARY KEY constraint for table "OFFER".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_OFFER PRIMARY KEY (Offer_Id)
);

-- Create a Database table to represent the "USER" entity.
CREATE TABLE S_USER(
	User_Id	VARCHAR(8) NOT NULL,
	User_role	VARCHAR(8) NOT NULL,
	User_Name	VARCHAR(25) NOT NULL,
	Email	VARCHAR(30) UNIQUE,
	Gender	VARCHAR(8) NOT NULL,
	Phonenumber	INTEGER NOT NULL,
	Password	VARCHAR(20) NOT NULL,
	Address	VARCHAR(20) NOT NULL,
	-- Specify the PRIMARY KEY constraint for table "USER".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_USER PRIMARY KEY (User_Id)
);

-- Create a Database table to represent the "ORDER" entity.
CREATE TABLE ORDER_ITEM(
	Order_Id	VARCHAR(8) NOT NULL,
	Order_Date	DATE NOT NULL,
	Order_Quantity	INTEGER NOT NULL,
	Order_Amount	FLOAT(8) NOT NULL,
	fk1_Cart_Id	INTEGER NOT NULL,
	-- Specify FK as unique to maintain 1:1 relationship
	UNIQUE(fk1_Cart_Id),
	fk2_Collection_Id	VARCHAR(8) NOT NULL,
	-- Specify the PRIMARY KEY constraint for table "ORDER".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_ORDER PRIMARY KEY (Order_Id)
);

-- Create a Database table to represent the "SHOP" entity.
CREATE TABLE SHOP(
	Shop_Id	VARCHAR(8) NOT NULL,
	Shop_Name	VARCHAR(20),
	Shop_Address	VARCHAR(20) NOT NULL,
	Shop_Type	VARCHAR(15),
	Shop_Phone_Number	INTEGER NOT NULL,
	Shop_Email	VARCHAR(30) NOT NULL,
	fk1_User_Id	VARCHAR(8) NOT NULL,
	-- Specify the PRIMARY KEY constraint for table "SHOP".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_SHOP PRIMARY KEY (Shop_Id)
);

-- Create a Database table to represent the "PRODUCT" entity.
CREATE TABLE PRODUCT(
	Product_Id	VARCHAR(8) NOT NULL,
	Product_Name	VARCHAR(15) NOT NULL,
	Product_Description	LONG VARCHAR NOT NULL,
	Price	FLOAT(8) NOT NULL,
	Product_Quantity	INTEGER NOT NULL,
	Product_Stock	INTEGER NOT NULL,
	Allergy_Info	INTEGER,
	Min_Order	INTEGER NOT NULL,
	Max_Order	INTEGER NOT NULL,
	Product_Image	VARCHAR(15) NOT NULL,
	fk1_Shop_Id	VARCHAR(8) NOT NULL,
	fk2_Product_Category_Id	VARCHAR(8) NOT NULL,
	-- Specify the PRIMARY KEY constraint for table "PRODUCT".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_PRODUCT PRIMARY KEY (Product_Id)
);



-- Create a Database table to represent the "REVIEW" entity.
CREATE TABLE REVIEW(
	Review_Id	VARCHAR(8) NOT NULL,
	Review_date	DATE NOT NULL,
	Review_Feedback	VARCHAR(50) NOT NULL,
	Review_Rating	INTEGER NOT NULL,
	fk1_Product_Id	VARCHAR(8) NOT NULL,
	fk2_User_Id	VARCHAR(8) NOT NULL
);

-- Create a Database table to represent the "CART" entity.
CREATE TABLE CART(
	Cart_Id	INTEGER NOT NULL,
	Cart_Item	INTEGER NOT NULL,
	fk1_User_Id	VARCHAR(8) NOT NULL,
	-- Specify FK as unique to maintain 1:1 relationship
	UNIQUE(fk1_User_Id),
	-- Specify the PRIMARY KEY constraint for table "CART".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_CART PRIMARY KEY (Cart_Id)
);

-- Create a Database table to represent the "REPORT" entity.
CREATE TABLE REPORT(
	Report_Id	VARCHAR(8) NOT NULL,
	Reprt_Type	VARCHAR(8) NOT NULL,
	Report_Name	VARCHAR(20) NOT NULL,
	Report_Date	DATE NOT NULL,
	fk1_Order_Id	VARCHAR(8) NOT NULL,
	fk2_User_Id	VARCHAR(8) NOT NULL,
	-- Specify the PRIMARY KEY constraint for table "REPORT".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_REPORT PRIMARY KEY (Report_Id)
);

-- Create a Database table to represent the "WISHLIST" entity.
CREATE TABLE WISHLIST(
	Wishlist_Id	VARCHAR(8) NOT NULL,
	Wishlist_Item	INTEGER,
	fk1_User_Id	VARCHAR(8) NOT NULL,
	-- Specify FK as unique to maintain 1:1 relationship
	UNIQUE(fk1_User_Id),
	-- Specify the PRIMARY KEY constraint for table "WISHLIST".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_WISHLIST PRIMARY KEY (Wishlist_Id)
);

-- Create a Database table to represent the "REPORT_PRODUCT" entity.
CREATE TABLE REPORT_PRODUCT(
	Report_Product_Id	VARCHAR(8) NOT NULL,
	Report_Id	VARCHAR(8) REFERENCES REPORT(Report_Id),
	Product_Id	VARCHAR(8) REFERENCES PRODUCT(Product_Id),
	
	-- Specify the PRIMARY KEY constraint for table "REPORT_PRODUCT".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_REPORT_PRODUCT PRIMARY KEY (Report_Product_Id)
);

-- Create a Database table to represent the "CART_PRODUCT" entity.
CREATE TABLE CART_PRODUCT(
	Cart_Product_Id	VARCHAR(8) NOT NULL,
	fk1_Product_Id	VARCHAR(8) NOT NULL,
	fk2_Cart_Id	INTEGER NOT NULL,
	-- Specify the PRIMARY KEY constraint for table "CART_PRODUCT".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_CART_PRODUCT PRIMARY KEY (Cart_Product_Id)
);

-- Create a Database table to represent the "COLLECTION_SLOT" entity.
CREATE TABLE COLLECTION_SLOT(
	Collection_Id	VARCHAR(8) NOT NULL,
	Collection_Date	DATE NOT NULL,
	Collection_Time	VARCHAR(8) NOT NULL,
	-- Specify the PRIMARY KEY constraint for table "COLLECTION_SLOT".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_COLLECTION_SLOT PRIMARY KEY (Collection_Id)
);

-- Create a Database table to represent the "PAYMENT" entity.
CREATE TABLE PAYMENT(
	Payment_Id	VARCHAR(8) NOT NULL,
	Payment_Date	DATE NOT NULL,
	Payment_Amount	FLOAT(8) NOT NULL,
	fk1_User_Id	VARCHAR(8) NOT NULL,
	fk2_Order_Id	VARCHAR(8) NOT NULL,
	-- Specify FK as unique to maintain 1:1 relationship
	UNIQUE(fk2_Order_Id),
	-- Specify the PRIMARY KEY constraint for table "PAYMENT".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_PAYMENT PRIMARY KEY (Payment_Id)
);

-- Create a Database table to represent the "PRODUCT_CATEGORY" entity.
CREATE TABLE PRODUCT_CATEGORY(
	Product_Category_Id	VARCHAR(8) NOT NULL,
	Category_Type	VARCHAR(15) NOT NULL,
	-- Specify the PRIMARY KEY constraint for table "PRODUCT_CATEGORY".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_PRODUCT_CATEGORY PRIMARY KEY (Product_Category_Id)
);


--------------------------------------------------------------
-- Create LINK tables --

-- These tables do not appear as entities on the model. The reason they are created
-- is to allow certain types of relationships to be implemented in a Relational type Database.
-- Each link table tends to represent a specific relationship that appears on the model.
-- The attributes contained in link tables are identified from the entities at either side
-- of the relationship. i.e. they do not define attributes in their own right.
-- Indeed foreign key constraints are always created to ensure referential integrity between the
-- link table attributes and the primary key attributes on which they are based.

-- Create a link table to represent the "PRODUCT_WISHLIST_PRODUCT" relationship.
-- The attributes of this table are taken from the primary keys of table "PRODUCT" and
-- table "WISHLIST_PRODUCT", i.e. each end of the relationship. A link table was created
-- because "PRODUCT_WISHLIST_PRODUCT" is a one to many relationship with optionality at the one side.
-- notice how the primary key is only based on the key of the table at the many side, i.e. table "WISHLIST_PRODUCT".
CREATE TABLE WISHLIST_PRODUCT(
	Wishlist_Product_Id	VARCHAR(8) Primary key,
	Wishlist_Id	VARCHAR(8) REFERENCES WISHLIST(Wishlist_Id),
	Product_Id	VARCHAR(8) REFERENCES PRODUCT(Product_Id)
);

-- Create a link table to represent the "PRODUCT_OFFER" relationship.
-- The attributes of this table are taken from the primary keys of table "PRODUCT" and
-- table "OFFER", i.e. each end of the relationship. A link table was created
-- because "PRODUCT_OFFER" is a many to one relationship with optionality at the one side.
-- notice how the primary key is only based on the key of the table at the many side, i.e. table "PRODUCT".
CREATE TABLE PRODUCT_OFFER(
	Product_Offer_Id	VARCHAR(8) Primary key,
	Offer_Id	VARCHAR(8) REFERENCES OFFER(Offer_Id),
	Product_Id VARCHAR(8) REFERENCES PRODUCT(Product_Id)
	 
);


--------------------------------------------------------------
-- Alter Tables to add fk constraints --

-- Now all the tables have been created the ALTER TABLE command is used to define some additional
-- constraints.  These typically constrain values of foreign keys to be associated in some way
-- with the primary keys of related tables.  Foreign key constraints can actually be specified
-- when each table is created, but doing so can lead to dependency problems within the script
-- i.e. tables may be referenced before they have been created.  This method is therefore safer.

-- Alter table to add new constraints required to implement the "REPORT_ORDER" relationship

-- This constraint ensures that the foreign key of table "REPORT"
-- correctly references the primary key of table "ORDER"

ALTER TABLE REPORT ADD CONSTRAINT fk1_REPORT_to_ORDER FOREIGN KEY(fk1_Order_Id) REFERENCES ORDER_Item(Order_Id);

-- Alter table to add new constraints required to implement the "PRODUCT_REPORT_PRODUCT" relationship

-- This constraint ensures that the foreign key of table "PRODUCT"
-- correctly references the primary key of table "REPORT_PRODUCT"

ALTER TABLE PRODUCT ADD CONSTRAINT fk2_PRODUCT_to_SHOP FOREIGN KEY(fk1_Shop_Id) REFERENCES SHOP(Shop_Id);

-- Alter table to add new constraints required to implement the "SHOP_USER" relationship

-- This constraint ensures that the foreign key of table "SHOP"
-- correctly references the primary key of table "USER"

ALTER TABLE SHOP ADD CONSTRAINT fk1_SHOP_to_USER FOREIGN KEY(fk1_User_Id) REFERENCES S_USER(User_Id);

-- Alter table to add new constraints required to implement the "PAYMENT_USER" relationship

-- This constraint ensures that the foreign key of table "PAYMENT"
-- correctly references the primary key of table "USER"

ALTER TABLE PAYMENT ADD CONSTRAINT fk1_PAYMENT_to_USER FOREIGN KEY(fk1_User_Id) REFERENCES S_USER(User_Id);

-- Alter table to add new constraints required to implement the "PRODUCT_PRODUCT_CATEGORY" relationship

-- This constraint ensures that the foreign key of table "PRODUCT"
-- correctly references the primary key of table "PRODUCT_CATEGORY"

ALTER TABLE PRODUCT ADD CONSTRAINT fk3_PRODUCT_to_PRODUCT_CATEGORY FOREIGN KEY(fk2_Product_Category_Id) REFERENCES PRODUCT_CATEGORY(Product_Category_Id) ;

-- Alter table to add new constraints required to implement the "CART_PRODUCT_PRODUCT" relationship

-- This constraint ensures that the foreign key of table "CART_PRODUCT"
-- correctly references the primary key of table "PRODUCT"

ALTER TABLE CART_PRODUCT ADD CONSTRAINT fk1_CART_PRODUCT_to_PRODUCT FOREIGN KEY(fk1_Product_Id) REFERENCES PRODUCT(Product_Id) ;

-- Alter table to add new constraints required to implement the "RATING_PRODUCT" relationship

-- This constraint ensures that the foreign key of table "RATING"
-- correctly references the primary key of table "PRODUCT"

ALTER TABLE REVIEW ADD CONSTRAINT fk1_REVIEW_to_PRODUCT FOREIGN KEY(fk1_Product_Id) REFERENCES PRODUCT(Product_Id) ;

-- Alter table to add new constraints required to implement the "CART_PRODUCT_CART" relationship

-- This constraint ensures that the foreign key of table "CART_PRODUCT"
-- correctly references the primary key of table "CART"

ALTER TABLE CART_PRODUCT ADD CONSTRAINT fk2_CART_PRODUCT_to_CART FOREIGN KEY(fk2_Cart_Id) REFERENCES CART(Cart_Id);

-- Alter table to add new constraints required to implement the "REPORT_USER" relationship

-- This constraint ensures that the foreign key of table "REPORT"
-- correctly references the primary key of table "USER"

ALTER TABLE REPORT ADD CONSTRAINT fk2_REPORT_to_USER FOREIGN KEY(fk2_User_Id) REFERENCES S_USER(User_Id) ;

-- Alter table to add new constraints required to implement the "ORDER_CART" relationship

-- This constraint ensures that the foreign key of table "ORDER"
-- correctly references the primary key of table "CART"

ALTER TABLE ORDER_ITEM ADD CONSTRAINT fk1_ORDER_to_CART FOREIGN KEY(fk1_Cart_Id) REFERENCES CART(Cart_Id) ;

-- Alter table to add new constraints required to implement the "ORDER_COLLECTION_SLOT" relationship

-- This constraint ensures that the foreign key of table "ORDER"
-- correctly references the primary key of table "COLLECTION_SLOT"

ALTER TABLE ORDER_ITEM ADD CONSTRAINT fk2_ORDER_to_COLLECTION_SLOT FOREIGN KEY(fk2_Collection_Id) REFERENCES COLLECTION_SLOT(Collection_Id);

-- Alter table to add new constraints required to implement the "RATING_USER" relationship

-- This constraint ensures that the foreign key of table "RATING"
-- correctly references the primary key of table "USER"

ALTER TABLE REVIEW ADD CONSTRAINT fk2_REVIEW_to_USER FOREIGN KEY(fk2_User_Id) REFERENCES S_USER(User_Id) ;

-- Alter table to add new constraints required to implement the "CART_USER" relationship

-- This constraint ensures that the foreign key of table "CART"
-- correctly references the primary key of table "USER"

ALTER TABLE CART ADD CONSTRAINT fk1_CART_to_USER FOREIGN KEY(fk1_User_Id) REFERENCES S_USER(User_Id) ;

-- Alter table to add new constraints required to implement the "PAYMENT_ORDER" relationship

-- This constraint ensures that the foreign key of table "PAYMENT"
-- correctly references the primary key of table "ORDER"

ALTER TABLE PAYMENT ADD CONSTRAINT fk2_PAYMENT_to_ORDER FOREIGN KEY(fk2_Order_Id) REFERENCES ORDER_ITEM(Order_Id) ;

-- Alter table to add new constraints required to implement the "WISHLIST_USER" relationship

-- This constraint ensures that the foreign key of table "WISHLIST"
-- correctly references the primary key of table "USER"

ALTER TABLE WISHLIST ADD CONSTRAINT fk1_WISHLIST_to_USER FOREIGN KEY(fk1_User_Id) REFERENCES S_USER(User_Id) ;


--------------------------------------------------------------
-- End of DDL file auto-generation
--------------------------------------------------------------



-- -- Insert table of offer

Insert INTO OFFER(Offer_Id,Offer_Start_date,Offer_End_Date,Offer_Percentage) Values ('101','04/21/2023','04/30/2023','20%');
Insert INTO OFFER(Offer_Id,Offer_Start_date,Offer_End_Date,Offer_Percentage) Values ('102','04/30/2023','05/11/2023','10%');
Insert INTO OFFER(Offer_Id,Offer_Start_date,Offer_End_Date,Offer_Percentage) Values ('103','05/12/2023','05/22/2023','15%');
Insert INTO OFFER(Offer_Id,Offer_Start_date,Offer_End_Date,Offer_Percentage) Values ('104','05/05/2023','05/15/2023','25%');
Insert INTO OFFER(Offer_Id,Offer_Start_date,Offer_End_Date,Offer_Percentage) Values ('105','05/01/2023','05/11/2023','30%');
Insert INTO OFFER(Offer_Id,Offer_Start_date,Offer_End_Date,Offer_Percentage) Values ('106','05/08/2023','05/18/2023','12%');
Insert INTO OFFER(Offer_Id,Offer_Start_date,Offer_End_Date,Offer_Percentage) Values ('107','05/13/2023','05/23/2023','14%');
Insert INTO OFFER(Offer_Id,Offer_Start_date,Offer_End_Date,Offer_Percentage) Values ('108','05/18/2023','05/28/2023','16%');
Insert INTO OFFER(Offer_Id,Offer_Start_date,Offer_End_Date,Offer_Percentage) Values ('109','05,09/2023','05/19/2023','18%');
Insert INTO OFFER(Offer_Id,Offer_Start_date,Offer_End_Date,Offer_Percentage) Values ('110','05/16/2023','05/26/2023','8%');


-- --Insert table of Users

INSERT INTO S_USER VALUES('201','Customer','Ram Evans','ramevans@gmail.com','Male',9849394600,'kramevans12','Birkby');
INSERT INTO S_USER VALUES('202','Trader','Sishir Kharel','sishirkharael@gmail.com','Male',9843236355,'ksishir123','Marsh');
INSERT INTO S_USER VALUES('203','Trader','Pramesh Kumar Yadav','prameshkumaryadav@gmail.com','Male',9849394337,'kpramesh123','Oakes');
INSERT INTO S_USER VALUES('204','Customer','Nabsrina Basu','nabsrinabasu@gmail.com','Female',9849757535,'knabsrina123','Lindley');
INSERT INTO S_USER VALUES('205','Customer','Sonika Shahi','sonikashahi@gmail.com','Female',9849352578,'ksonika123','Deighton');
INSERT INTO S_USER VALUES('206','Admin','Nilesh Karanjit','nileshkaranjit8@gmail.com','Male',9849394677,'knilesh123','Oakes');
INSERT INTO S_USER VALUES('207','Trader','Shyam Oliver ','shyamoliver@gmail.com','Male',9849399071,'koiver123','Oakes');
INSERT INTO S_USER VALUES('208','Trader','John Oliver ','johnoliver@gmail.com','Male',9849391055,'kjohn123','Marsh');
INSERT INTO S_USER VALUES('209','Trader','Johnney Smith ','johnneysmith@gmail.com','Male',9849157628,'kjohnney123','Brikby');
INSERT INTO S_USER VALUES('210','Trader','Noah Arthur ','noaharthur@gmail.com','Female',9840781222,'knoah123','West Yorkshire');
INSERT INTO S_USER VALUES('211','Trader','Jack Johnson','jackjohnson@gmail.com','Male',9803157215,'kjack123','West Yorkshire');
INSERT INTO S_USER VALUES('212','Trader','Nusha Bradford ','nushabradford@gmail.com','Female',9849399055,'knusha123','Oakes');
INSERT INTO S_USER VALUES('213','Customer','Brad Robinson','bradrobinson@gmail.com','Male',9849387879,'kbrad123','Deighton');
INSERT INTO S_USER VALUES('214','Customer','Nick Harrison','nickharrison@gmail.com','Male',9851175172,'knick123','Lindley');
INSERT INTO S_USER VALUES('215','Customer','Tylor Lewis','tylorlewis@gmail.com','Female',9849394040,'kTylor123','Deighton');

--Insert table of Cart
INSERT INTO CART VALUES(301,3,'201');
INSERT INTO CART VALUES(302,2,'203');
INSERT INTO CART VALUES(303,4,'205');
INSERT INTO CART VALUES(304,5,'206');
INSERT INTO CART VALUES(305,2,'204');
INSERT INTO CART VALUES(306,3,'202');

--Insert into Shop table
Insert into SHOP values ('400','Ramons Bakery','CleckHuddersfax', 'Bakery', 02081085994,'ramonsbake@gmail.com','202');
Insert into SHOP values ('401','Fochabers Fish Bar','CleckHuddersfax', 'FishMonger', 02091085984,'fochabers@gmail.com','202');
Insert into SHOP values ('402','Meat Me Here','CleckHuddersfax', 'Butcher', 02071085974,'meatmehere@gmail.com','203');
Insert into SHOP values ('403','De Beauvoir Deli','CleckHuddersfax', 'Delicatessen', 02061085974,'debeauvoirdeli@gmail.com','207');
Insert into SHOP values ('404','Newington Green','CleckHuddersfax', 'Greengrocer', 02099085999,'newingtongreen@gmail.com','207');
Insert into SHOP values ('405','Simons Bakery','CleckHuddersfax', 'Bakery', 02081585994,'simons@gmail.com','208');
Insert into SHOP values ('406','Suido Fish Shop','CleckHuddersfax', 'FishMonger', 02091089984,'suidofishshop@gmail.com','209');
Insert into SHOP values ('407','Fresh meateria','CleckHuddersfax', 'Butcher', 02071088974,'freshmeateriae@gmail.com','210');
Insert into SHOP values ('408','Swiggy','CleckHuddersfax', 'Delicatessen', 02061085964,'wiggy@gmail.com','211');
Insert into SHOP values ('409','Cleck Greenies','CleckHuddersfax', 'Greengrocer', 02099085799,'cleckgreenies@gmail.com','212');


--Insert table of COLLECTION_SLOT
INSERT INTO COLLECTION_SLOT values ('501','4/10/2023','10-13');
INSERT INTO COLLECTION_SLOT values ('502','6/12/2023','13-16');
INSERT INTO COLLECTION_SLOT values ('503','8/18/2023','16-19');
INSERT INTO COLLECTION_SLOT values ('504','9/10/2023','10-13');
INSERT INTO COLLECTION_SLOT values ('505','11/9/2023','16-19');
INSERT INTO COLLECTION_SLOT values ('506','12/2/2023','13-16');

--Insert table of ORDER_ITEM
INSERT INTO ORDER_ITEM values ('601','4/9/2023',3,9.48,301,'501');
INSERT INTO ORDER_ITEM values ('602','6/11/2023',4,30,302,'502');
INSERT INTO ORDER_ITEM values ('603','8/17/2023',2,4.8,303,'503');
INSERT INTO ORDER_ITEM values ('604','9/9/2023',1,4,304,'504');
INSERT INTO ORDER_ITEM values ('605','11/8/2023',2,10,305,'505');
INSERT INTO ORDER_ITEM values ('606','12/1/2023',6,12,306,'506');

-- Insert table of Report
INSERT INTO REPORT values ('701','Monthly','Ramons Bakery','4/11/2023','601','201');
INSERT INTO REPORT values ('702','Daily','Meat Me Here','6/13/2023','602','204');
INSERT INTO REPORT values ('703','Daily','De Beauvoir Deli','8/19/2023','603','205');
INSERT INTO REPORT values ('704','Daily','Fochabers Fish Bar','9/11/2023','604','213');
INSERT INTO REPORT values ('705','Weekly','Swiggy','11/11/2023','605','214');
INSERT INTO REPORT values ('706','Monthly','Cleck Greenies','12/4/2023','606','215');

--Insert table of Product Category
INSERT INTO PRODUCT_CATEGORY values ('801','Butcher');
INSERT INTO PRODUCT_CATEGORY values ('802','Greengrocer');
INSERT INTO PRODUCT_CATEGORY values ('803','Fishmonger');
INSERT INTO PRODUCT_CATEGORY values ('804','Bakery');
INSERT INTO PRODUCT_CATEGORY values ('805','Delicatessen');


INSERT INTO PRODUCT (Product_Id,Product_Name,Product_Description,Price,Product_Quantity,Product_Stock,Min_Order,Max_Order,Product_Image,fk1_Shop_Id,fk2_Product_Category_Id)
Values ('901','Chicken','Healthy and organic chicken',3,1,5,1,3,'chicken.jpg','407','801');
INSERT INTO PRODUCT (Product_Id,Product_Name,Product_Description,Price,Product_Quantity,Product_Stock,Min_Order,Max_Order,Product_Image,fk1_Shop_Id,fk2_Product_Category_Id)
Values ('902','Cake','Cheese cake',2,1,10,1,3,'cake.jpg','400','804');
INSERT INTO PRODUCT (Product_Id,Product_Name,Product_Description,Price,Product_Quantity,Product_Stock,Min_Order,Max_Order,Product_Image,fk1_Shop_Id,fk2_Product_Category_Id)
Values ('903','Salmon','Fresh Salmon',5,1,13,1,5,'salmon.jpg','406','803');
INSERT INTO PRODUCT (Product_Id,Product_Name,Product_Description,Price,Product_Quantity,Product_Stock,Min_Order,Max_Order,Product_Image,fk1_Shop_Id,fk2_Product_Category_Id)
Values ('904','Lettuce','Pure and organic',1,2,10,2,5,'Lettuce.jpg','409','802');
INSERT INTO PRODUCT (Product_Id,Product_Name,Product_Description,Price,Product_Quantity,Product_Stock,Min_Order,Max_Order,Product_Image,fk1_Shop_Id,fk2_Product_Category_Id)
Values ('905','Yak Cheese','Stright from himalayan yak',3,1,10,1,3,'yak.jpg','408','805');
INSERT INTO PRODUCT (Product_Id,Product_Name,Product_Description,Price,Product_Quantity,Product_Stock,Min_Order,Max_Order,Product_Image,fk1_Shop_Id,fk2_Product_Category_Id)
Values ('906','Buff Sausage','Fresh and Delicious',2,1,5,1,3,'buff.jpg','402','801');

--Insert table of REVIEW
INSERT INTO REVIEW Values ('1000','5/10/2023','The product was delicious',4,'901','204');
INSERT INTO REVIEW values ('1001','6/13/2023','SATISFIED WITH THE PRODUCT',3,'902','205');
INSERT INTO REVIEW values ('1002','8/19/2023','QUALITY WAS OUTSTANDING',3,'904','213');
INSERT INTO REVIEW values ('1003','9/11/2023','WOULD HIGHLY RECOMMEND THIS PRODUCT',4,'906','214');
INSERT INTO REVIEW values ('1004','11/10/2023','DEFINITELY PERCHASE BACK',3,'905','215');

--Insert table of REPORT_PRODUCT
INSERT INTO REPORT_PRODUCT Values ('1100','701','902');
INSERT INTO REPORT_PRODUCT Values ('1101','702','901');
INSERT INTO REPORT_PRODUCT Values ('1102','703','905');
INSERT INTO REPORT_PRODUCT Values ('1104','704','903');

-- --Insert table of CART_PRODUCT
INSERT INTO CART_PRODUCT Values ('1200','901','301');
INSERT INTO CART_PRODUCT Values ('1201','902','302');
INSERT INTO CART_PRODUCT Values ('1202','903','303');
INSERT INTO CART_PRODUCT Values ('1203','904','304');
INSERT INTO CART_PRODUCT Values ('1204','905','305');

--Insert table of PAYMENT
INSERT INTO PAYMENT Values ('1301','4/10/2023',10,'201','601');
INSERT INTO PAYMENT Values ('1302','6/12/2023',7,'204','602');
INSERT INTO PAYMENT Values ('1303','8/17/2023',8,'205','603');
INSERT INTO PAYMENT Values ('1304','9/9/2023',3,'213','604');
INSERT INTO PAYMENT Values ('1305','11/8/2023',4,'214','605');
INSERT INTO PAYMENT Values ('1306','12/1/2023',3,'215','606');

INSERT INTO WISHLIST Values ('1401',5,'201');
INSERT INTO WISHLIST Values ('1402',6,'204');
INSERT INTO WISHLIST Values ('1403',3,'205');
INSERT INTO WISHLIST Values ('1404',2,'215');
INSERT INTO WISHLIST Values ('1405',1,'213');
INSERT INTO WISHLIST Values ('1406',3,'214');


INSERT INTO WISHLIST_PRODUCT Values ('1501','1401','901');
INSERT INTO WISHLIST_PRODUCT Values ('1502','1402','902');
INSERT INTO WISHLIST_PRODUCT Values ('1503','1403','903');
INSERT INTO WISHLIST_PRODUCT Values ('1504','1404','904');
INSERT INTO WISHLIST_PRODUCT Values ('1505','1405','905');
INSERT INTO WISHLIST_PRODUCT Values ('1506','1406','906');


INSERT INTO PRODUCT_OFFER Values ('1601','101','901');
INSERT INTO PRODUCT_OFFER Values ('1602','102','904');
INSERT INTO PRODUCT_OFFER Values ('1603','103','902');
INSERT INTO PRODUCT_OFFER Values ('1604','104','903');
INSERT INTO PRODUCT_OFFER Values ('1605','105','905');
INSERT INTO PRODUCT_OFFER Values ('1606','106','906');


---- DROP TABLE OF SEQUENCE-----------------

Drop sequence seq_user_pk;
Drop sequence seq_offer_pk;
Drop sequence seq_cart_pk;
Drop sequence seq_order_item_pk;
Drop sequence seq_shop_pk;
Drop sequence seq_product_pk;
Drop sequence seq_review_pk;
Drop sequence seq_report_pk;
Drop sequence seq_report_product_pk;
Drop sequence seq_cart_product_pk;
Drop sequence seq_collection_slot_pk;
Drop sequence seq_payment_pk;
Drop sequence seq_product_category_pk;
Drop sequence seq_product_offer_pk;
Drop sequence seq_wishlist_pk;
Drop sequence seq_wishlist_product_pk;


--Sequence for USER-----
CREATE SEQUENCE seq_user_pk
START WITH 216
INCREMENT BY 1;

--Sequence for OFFER-----
CREATE SEQUENCE seq_offer_pk
START WITH 111
INCREMENT BY 1;

--Sequence for CART-----
CREATE SEQUENCE seq_cart_pk
START WITH 307
INCREMENT BY 1;

--Sequence for ORDER_ITEM-----

CREATE SEQUENCE seq_order_item_pk
START WITH 607
INCREMENT BY 1;

--Sequence for SHOP-----

CREATE SEQUENCE seq_shop_pk
START WITH 410
INCREMENT BY 1;

---Sequence for PRODUCT-----

CREATE SEQUENCE seq_product_pk
START WITH 907
INCREMENT BY 1;

---Sequence for REVIEW-----

CREATE SEQUENCE seq_review_pk
START WITH 1005
INCREMENT BY 1;

---Sequence for REPORT_PRODUCT-----

CREATE SEQUENCE seq_report_product_pk
START WITH 1105
INCREMENT BY 1;

---Sequence for CART_PRODUCT-----

CREATE SEQUENCE seq_cart_product_pk
START WITH 1205
INCREMENT BY 1;

---Sequence for COLLECTION_SLOT-----

CREATE SEQUENCE seq_collection_slot_pk
START WITH 507
INCREMENT BY 1;

---Sequence for PAYMENT-----

CREATE SEQUENCE seq_payment_pk
START WITH 1307
INCREMENT BY 1;

---Sequence for PRODUCT_CATEGORY-----

CREATE SEQUENCE seq_product_category_pk
START WITH 806
INCREMENT BY 1;

---Sequence for WISHLIST-----

CREATE SEQUENCE seq_wishlist_pk
START WITH 1407
INCREMENT BY 1;

---Sequence for WISHLIST_PRODUCT----
CREATE SEQUENCE seq_wishlist_product_pk
START WITH 1507
INCREMENT BY 1;

---Sequence for REPORT-----
CREATE SEQUENCE seq_report_pk
START WITH 707
INCREMENT BY 1;

---Sequence for PRODUCT_OFFER-----
CREATE SEQUENCE seq_product_offer_pk
START WITH 1607
INCREMENT BY 1;



/
---Trigger for user-----
CREATE OR REPLACE TRIGGER trig_user_pk
BEFORE INSERT ON S_USER
FOR EACH ROW
BEGIN 
IF :NEW.User_Id IS NULL THEN
SELECT seq_user_pk.NEXTVAL INTO :NEW.User_Id FROM SYS.DUAL;
END IF;
END;
/
---Trigger for Offer-----

CREATE OR REPLACE TRIGGER trig_offer_pk
BEFORE INSERT ON OFFER
FOR EACH ROW
BEGIN 
IF :NEW.Offer_Id IS NULL THEN
SELECT seq_offer_pk.NEXTVAL INTO :NEW.Offer_Id FROM SYS.DUAL;
END IF;
END;
/
---Trigger for CART-----

CREATE OR REPLACE TRIGGER trig_cart_pk
BEFORE INSERT ON CART
FOR EACH ROW
BEGIN 
IF :NEW.Cart_Id IS NULL THEN
SELECT seq_cart_pk.NEXTVAL INTO :NEW.Cart_Id FROM SYS.DUAL;
END IF;
END;
/
---Trigger for ORDER_ITEM-----
CREATE OR REPLACE TRIGGER trig_order_item_pk
BEFORE INSERT ON ORDER_ITEM
FOR EACH ROW
BEGIN 
IF :NEW.Order_Id IS NULL THEN
SELECT seq_order_item_pk.NEXTVAL INTO :NEW.Order_Id FROM SYS.DUAL;
END IF;
END;
/
---Trigger for SHOP-----

CREATE OR REPLACE TRIGGER trig_shop_pk
BEFORE INSERT ON SHOP
FOR EACH ROW
BEGIN 
IF :NEW.Shop_Id IS NULL THEN
SELECT seq_shop_pk.NEXTVAL INTO :NEW.Shop_Id FROM SYS.DUAL;
END IF;
END;
/
---Trigger for PRODUCT-----

CREATE OR REPLACE TRIGGER trig_product_pk
BEFORE INSERT ON PRODUCT
FOR EACH ROW
BEGIN 
IF :NEW.Product_Id IS NULL THEN
SELECT seq_product_pk.NEXTVAL INTO :NEW.Product_Id FROM SYS.DUAL;
END IF;
END;
/
---Trigger for REVIEW-----

CREATE OR REPLACE TRIGGER trig_review_pk
BEFORE INSERT ON REVIEW
FOR EACH ROW
BEGIN 
IF :NEW.Review_Id IS NULL THEN
SELECT seq_review_pk.NEXTVAL INTO :NEW.Review_Id FROM SYS.DUAL;
END IF;
END;
/
---Trigger for REPORT_PRODUCT -----

CREATE OR REPLACE TRIGGER trig_report_product_pk
BEFORE INSERT ON REPORT_PRODUCT
FOR EACH ROW
BEGIN 
IF :NEW.Report_Product_Id IS NULL THEN
SELECT seq_report_product_pk.NEXTVAL INTO :NEW.Report_Product_Id FROM SYS.DUAL;
END IF;
END;
/
---Trigger for CART_PRODUCT -----

CREATE OR REPLACE TRIGGER trig_cart_product_pk
BEFORE INSERT ON CART_PRODUCT
FOR EACH ROW
BEGIN 
IF :NEW.Cart_Product_Id IS NULL THEN
SELECT seq_cart_product_pk.NEXTVAL INTO :NEW.Cart_Product_Id FROM SYS.DUAL;
END IF;
END;

/
---Trigger for COLLECTION_SLOT-----

CREATE OR REPLACE TRIGGER trig_collection_slot_pk
BEFORE INSERT ON COLLECTION_SLOT
FOR EACH ROW
BEGIN 
IF :NEW.Collection_Id IS NULL THEN
SELECT seq_collection_slot_pk.NEXTVAL INTO :NEW.Collection_Id FROM SYS.DUAL;
END IF;
END;
/
---Trigger for PAYMENT-----

CREATE OR REPLACE TRIGGER trig_payment_pk
BEFORE INSERT ON PAYMENT
FOR EACH ROW
BEGIN 
IF :NEW.Payment_Id IS NULL THEN
SELECT seq_payment_pk.NEXTVAL INTO :NEW.Payment_Id FROM SYS.DUAL;
END IF;
END;

/
---Trigger for PRODUCT_CATEGORY-----

CREATE OR REPLACE TRIGGER trig_product_category_pk
BEFORE INSERT ON PRODUCT_CATEGORY
FOR EACH ROW
BEGIN 
IF :NEW.Product_Category_Id IS NULL THEN
SELECT seq_product_category_pk.NEXTVAL INTO :NEW.Product_Category_Id FROM SYS.DUAL;
END IF;
END;

/
---Trigger for WISHLIST-----

CREATE OR REPLACE TRIGGER trig_wishlist_pk
BEFORE INSERT ON WISHLIST
FOR EACH ROW
BEGIN 
IF :NEW.Wishlist_Id IS NULL THEN
SELECT seq_wishlist_pk.NEXTVAL INTO :NEW.Wishlist_Id FROM SYS.DUAL;
END IF;
END;

/
---Trigger for WISHLIST_PRODUCT-----

CREATE OR REPLACE TRIGGER trig_wishlist_product_pk
BEFORE INSERT ON WISHLIST_PRODUCT
FOR EACH ROW
BEGIN 
IF :NEW.Wishlist_Product_Id IS NULL THEN
SELECT seq_wishlist_product_pk.NEXTVAL INTO :NEW.Wishlist_Product_Id FROM SYS.DUAL;
END IF;
END;

/
---Trigger for REPORT-----

CREATE OR REPLACE TRIGGER trig_report_pk
BEFORE INSERT ON REPORT
FOR EACH ROW
BEGIN 
IF :NEW.Report_Id IS NULL THEN
SELECT seq_report_pk.NEXTVAL INTO :NEW.Report_Id FROM SYS.DUAL;
END IF;
END;
/
---Trigger for PRODUCT_OFFER-----

CREATE OR REPLACE TRIGGER trig_product_offer_pk
BEFORE INSERT ON PRODUCT_OFFER
FOR EACH ROW
BEGIN 
IF :NEW.Product_Offer_Id IS NULL THEN
SELECT seq_product_offer_pk.NEXTVAL INTO :NEW.Product_Offer_Id FROM SYS.DUAL;
END IF;
END;

















